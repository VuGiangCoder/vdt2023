<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1326.ve643e00e9220">
    <actions>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction
                plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction
                plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
            <jobProperties/>
            <triggers/>
            <parameters/>
            <options/>
        </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    </actions>
    <description>Chọn xây dựng khi có thay đổi được đẩy lên từ GitLab</description>
    <keepDependencies>false</keepDependencies>
    <properties>
        <io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty plugin="openshift-sync@1.1.0.795.v95fa_27a_a_e287">
            <uid></uid>
            <namespace></namespace>
            <name></name>
            <resourceVersion></resourceVersion>
        </io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty>
        <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.7.15">
            <gitLabConnection>my gitlab connect</gitLabConnection>
            <jobCredentialId></jobCredentialId>
            <useAlternativeCredential>false</useAlternativeCredential>
        </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers>
                <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.7.15">
                    <spec></spec>
                    <triggerOnPush>true</triggerOnPush>
                    <triggerToBranchDeleteRequest>false</triggerToBranchDeleteRequest>
                    <triggerOnMergeRequest>true</triggerOnMergeRequest>
                    <triggerOnlyIfNewCommitsPushed>false</triggerOnlyIfNewCommitsPushed>
                    <triggerOnPipelineEvent>false</triggerOnPipelineEvent>
                    <triggerOnAcceptedMergeRequest>false</triggerOnAcceptedMergeRequest>
                    <triggerOnClosedMergeRequest>false</triggerOnClosedMergeRequest>
                    <triggerOnApprovedMergeRequest>true</triggerOnApprovedMergeRequest>
                    <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
                    <triggerOnNoteRequest>true</triggerOnNoteRequest>
                    <noteRegex>Jenkins please retry a build</noteRegex>
                    <ciSkip>true</ciSkip>
                    <skipWorkInProgressMergeRequest>true</skipWorkInProgressMergeRequest>
                    <labelsThatForcesBuildIfAdded></labelsThatForcesBuildIfAdded>
                    <setBuildDescription>true</setBuildDescription>
                    <branchFilterType>All</branchFilterType>
                    <includeBranchesSpec></includeBranchesSpec>
                    <excludeBranchesSpec></excludeBranchesSpec>
                    <sourceBranchRegex></sourceBranchRegex>
                    <targetBranchRegex></targetBranchRegex>
                    <!--
                    <secretToken>{AQAAABAAAAAQ0xiOtix5Fr9D7eCix5cbp+TFDRRVtV4zcR7VklWbLl8=}</secretToken>
                    -->
                    <pendingBuildName></pendingBuildName>
                    <cancelPendingBuildsOnUpdate>false</cancelPendingBuildsOnUpdate>
                </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
            </triggers>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3774.v4a_d648d409ce">
        <script>
            pipeline {
            agent any
            environment {
            registry = "vugiangcoder/build-test"
            registryCredential = "dockerhub"
            dockerImage = ""
            }
            stages {
            stage("Clone Git repository") {
            steps {
            dir("sourcecode") {
            git(
            url: "https://gitlab.com/VuGiangCoder/microservice-deploy.git",
            branch: "main",
            changelog: true,
            poll: true
            )
            }
            }
            }
            stage("Build image") {
            dir("sourcecoode") {
            steps {
            script {
            dockerImage = docker.build registry + ":latest"
            }
            }
            }
            }
            stage("Push image to Docker Hub") {
            steps {
            script {
            docker.withRegistry("", registryCredential) {
            dockerImage.push()
            }
            }
            }
            }
            stage("Deploy to k8s") {
            steps {
            dir("depend") {
            withKubeConfig([
            credentialsId: "config-jenkins-k8s",
            serverUrl: "https://127.0.0.1:62426"
            ]) {
            bat "kubectl apply -f deployment.yaml"
            }
            }
            }
            }
            }
            }
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>