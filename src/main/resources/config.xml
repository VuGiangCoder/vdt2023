<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
    <actions>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction
                plugin="pipeline-model-definition@1.11.2"/>
    </actions>
    <description></description>
    <keepDependencies>false</keepDependencies>

<!--    <project>-->
<!--        <triggers>-->
<!--            <org.jenkinsci.plugins.gogs.GogsTrigger plugin="gogs-webhook@1.4">-->
<!--                <triggerOnPush>true</triggerOnPush>-->
<!--                <triggerOnNote>true</triggerOnNote>-->
<!--                <triggerOnMergeRequest>true</triggerOnMergeRequest>-->
<!--            </org.jenkinsci.plugins.gogs.GogsTrigger>-->
<!--        </triggers>-->
<!--    </project>-->
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.86">
        <script>
            properties([
                gitLabConnection("http://root:L8uX4Y3zsEstqPXAfy9o@192.168.56.1:80/viettel-vdt2023/test1/test1/test1test1sourcecode"),
                pipelineTriggers([
                    [
                        $class               : "GitLabPushTrigger",
                        triggerOnPush        : true,
                        triggerOnMergeRequest: true,
                    ]
                ]),
                disableConcurrentBuilds(),
                overrideIndexTriggers(false)
            ])
            pipeline{
                agent any
                environment {
                    registry = "vugiangcoder/test-build"
                    registryCredential = "dockerhub"
                    dockerImage = ""
                }
                stages{
                    stage("Clone Git repository"){
                        steps{
                            git(
                                url:"http://root:L8uX4Y3zsEstqPXAfy9o@192.168.56.1:80/viettel-vdt2023/test1/test1/test1test1sourcecode",
                                branch: "main",
                                changelog: true,
                                poll: true
                            )

                        }
                 }
                stage("Build image"){
                    steps{
                        script{
                            dockerImage=docker.build registry + ":latest"
                        }
                    }
                }
                stage("Push image to Docker Hub"){
                    steps{
                        script{
                            docker.withRegistry( "", registryCredential){
                                dockerImage.push()
                            }
                        }
                    }
                }
            }
            }
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>